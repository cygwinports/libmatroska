--- origsrc/libmatroska-0.8.1/make/cygwin/Makefile	2004-07-09 16:05:36.000000000 -0500
+++ src/libmatroska-0.8.1/make/cygwin/Makefile	2007-04-08 00:28:49.031250000 -0500
@@ -1,60 +1,172 @@
 # libmatroska core Makefile (used in cygwin)
-# $Id: libmatroska-0.8.1-1.src.patch,v 1.1 2007-04-08 05:46:32 yselkowitz Exp $
-
-# Options
-EXTENSION=.cpp
-CXXFLAGS=-g -DDEBUG -Wall -Wno-unknown-pragmas -DWIN32 -DNO_NAMESPACE
-LDFLAGS=
-
-SRC_DIR=../../src/
+# $Id: libmatroska-0.8.1-1.src.patch,v 1.1 2007-04-08 05:46:32 yselkowitz Exp $
+# Author: Steve Lhomme <robux4 @ users.sf.net>
+# Author: Moritz Bunkus <moritz @ bunkus.org>
+
+#
+# The library is built without debug information. If you want
+# debug information to be included then compile with
+# 'make DEBUG=yes'.
+#
+
+# Paths
+prefix=/usr
+bindir=$(prefix)/bin
+libdir=$(prefix)/lib
+includedir=$(prefix)/include/matroska
 
 # Programs
-CXX=g++ -c
-LD=g++
-DEP=$(CXX) -MM
-DEPEND = makedepend
+CXX=g++
+LD=$(CXX)
 AR = ar rcvu
 RANLIB = ranlib
+INSTALL = install
+INSTALL_OPTS = -m 644
+INSTALL_OPTS_LIB = -m 644
+INSTALL_DIR_OPTS = -m 755
+
+ifneq (,$(shell $(CXX) -v 2>&1 | tail -n 1 | grep -i mingw))
+$(error Please use the Makefile in ../mingw32)
+endif
+
+CWD=$(shell pwd)
+
+# Options
+LIBEBML_INCLUDE_DIR=$(CWD)/../../../libebml
+LIBEBML_LIB_DIR=$(CWD)/../../../libebml/make/cygwin
+EXTENSION=.cpp
+
+ifeq (yes,$(DEBUG))
+DEBUGFLAGS=-g -DDEBUG
+endif
+
+SRC_DIR=$(CWD)/../../src/
+INCLUDE_DIR=$(CWD)/../../matroska
+MUX_SRC_DIR=$(CWD)/../../test/mux/
+TAG_SRC_DIR=$(CWD)/../../test/tags/
 
 # Librarires
-INCLUDE=
+INCLUDE=-I$(CWD)/../.. -I$(LIBEBML_INCLUDE_DIR)
 LIBS=
+MUX_LIBS=-lmatroska -lebml $(LIBICONV)
 
 # Names
-PROGRAM=libmatroska.a
+LIBRARY=libmatroska.a
+LIBRARY_SO=libmatroska.dll.a
+LIBRARY_SO_VER=cygmatroska-0.dll
 
 # source-files
 sources:=$(wildcard ${SRC_DIR}*$(EXTENSION))
 
 # header files; replace .cxx extension with .h
-headers:=$(patsubst %$(EXTENSION),%.hpp,$(sources))
-
-# files holding dependency information; replace .cxx extension with .dep
-dependencies:=$(patsubst %$(EXTENSION),%.dep,$(sources))
+headers:=$(patsubst %$(EXTENSION),%.h,$(sources))
 
 # object files; replace .cxx extension with .o
 objects:=$(patsubst %$(EXTENSION),%.o,$(sources))
 
-DEPENDFLAGS  = ${CXXFLAGS} ${INCLUDE}
+objects_so:=$(patsubst %$(EXTENSION),%.lo,$(sources))
+
+WARNINGFLAGS=-Wall -Wno-unknown-pragmas -ansi -fno-gnu-keywords -D_GNU_SOURCE \
+		-Wshadow
+COMPILEFLAGS=$(DEBUGFLAGS) $(CXXFLAGS) $(CPPFLAGS) $(WARNINGFLAGS) $(INCLUDE)
+LINKFLAGS=-L. -L$(LIBEBML_LIB_DIR) $(LDFLAGS)
+DEPENDFLAGS  = $(CXXFLAGS) $(INCLUDE)
+
+all: staticlib sharedlib
+
+staticlib: $(LIBRARY)
+
+sharedlib: $(LIBRARY_SO)
+
+lib:
+	@echo "Use the 'staticlib', 'sharedlib' or 'all' targets."
+	@false
 
 # Build rules
 %.o: %$(EXTENSION)
-	$(CXX) $(CXXFLAGS) $(INCLUDE) -o $@ $<
+	$(CXX) -c $(COMPILEFLAGS) -o $@ $<
 
-$(PROGRAM): $(objects)
+%.lo: %$(EXTENSION)
+	$(CXX) -c $(COMPILEFLAGS) -o $@ $<
+
+$(LIBRARY): $(objects)
 	$(AR) $@ $(objects)
 	$(RANLIB) $@
-#	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)
-#	${LD} -o $@ ${LDFLAGS} ${OBJS} ${LIBS} ${EXTRA_LIBS}
 
-clean:
-	rm -f ${SRC_DIR}$(objects)
-	rm -f ${SRC_DIR}$(dependencies)
-	rm -f ${SRC_DIR}$(PROGRAM)
+$(LIBRARY_SO): $(objects_so)
+	$(CXX) -shared -Wl,--enable-auto-image-base -Wl,--out-implib,$(LIBRARY_SO) -o $(LIBRARY_SO_VER) $(objects_so) -lebml
+
+clean:	cleantest
+	rm -f $(objects) $(objects_so)
+	rm -f $(LIBRARY)
+	rm -f $(LIBRARY_SO)
+	rm -f $(LIBRARY_SO_VER)
 	rm -f CORE
 
-# what are the source dependencies
-depend: $(sources)
-	$(DEPEND) $(DEPENDFLAGS) $(sources)
+cleantest:
+	rm -f test6 test8 test9 test6.o test8.o test9.o
+
+distclean dist-clean: clean
+	rm -f .depend
+
+depend:
+	@echo Calculating dependecies:
+	@rm -f .depend
+	@touch .depend
+	@for i in $(sources); do \
+		o="`echo $$i | sed -e 's/\.c$$/.o/' -e 's/\.cpp$$/.o/'`" ; \
+		echo '  ' $$i: $$o ; \
+		$(CXX) $(DEPENDFLAGS) -MM -MT $$o $$i >> .depend ; \
+	done
+
+test: test6 test9
+
+test6:	test6.o $(LIBRARY) $(LIBRARY_SO)
+	$(LD) -o $@ $(LINKFLAGS) $< $(MUX_LIBS)
+
+test6.o: $(MUX_SRC_DIR)test6.cpp
+	$(CXX) -c $(COMPILEFLAGS) -o $@ $<
+
+test8:	test8.o $(LIBRARY) $(LIBRARY_SO)
+	$(LD) -o $@ $(LINKFLAGS) $< $(MUX_LIBS)
+
+test8.o: $(MUX_SRC_DIR)test8.cpp
+	$(CXX) -c $(COMPILEFLAGS) -o $@ $<
+
+test9:	test9.o $(LIBRARY) $(LIBRARY_SO)
+	$(LD) -o $@ $(LINKFLAGS) $< $(MUX_LIBS)
+
+test9.o: $(TAG_SRC_DIR)test9.cpp
+	$(CXX) -c $(COMPILEFLAGS) -o $@ $<
+
+ifeq (Darwin,$(shell uname -s))
+install: install_staticlib install_headers
+else
+install: install_staticlib install_sharedlib install_headers
+endif
+
+install_headers:
+	$(INSTALL) $(INSTALL_DIR_OPTS) -d $(includedir)
+	for i in $(INCLUDE_DIR)/*.h; do \
+		$(INSTALL) $(INSTALL_OPTS) $$i $(includedir) ; \
+	done
+	$(INSTALL) $(INSTALL_DIR_OPTS) -d $(includedir)/c
+	for i in $(INCLUDE_DIR)/c/*.h; do \
+		$(INSTALL) $(INSTALL_OPTS) $$i $(includedir)/c ; \
+	done
+
+install_staticlib: $(LIBRARY)
+	$(INSTALL) $(INSTALL_DIR_OPTS) -d $(libdir)
+	$(INSTALL) $(INSTALL_OPTS_LIB) $(LIBRARY) $(libdir)
+
+install_sharedlib: $(LIBRARY_SO)
+	$(INSTALL) $(INSTALL_DIR_OPTS) -d $(libdir)
+	$(INSTALL) $(INSTALL_DIR_OPTS) -d $(bindir)
+	$(INSTALL) $(INSTALL_OPTS_LIB) $(LIBRARY_SO) $(libdir)
+	$(INSTALL) $(INSTALL_OPTS_LIB) $(LIBRARY_SO_VER) $(bindir)
+
+ifneq ($(wildcard .depend),)
+include .depend
+endif
 
 # DO NOT DELETE
